// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>

#nullable enable
using System;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace SmartV
{
    unsafe partial class VectorOperation
    {

        /// <summary> Operates <c>Add</c> unaly operation. </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="ans"></param>
        /// <param name="iterationStrategy">
        /// <para>The iteration strategy provider.</para>
        /// <para>If <c>null</c> or <see cref="IterationStrategy.Default"/>, the iteration logic will be optimized with standard for-loop.</para>
        /// </param>
        /// <exception cref="ArgumentException">
        /// <para>The length of <paramref name="x"/> and <paramref name="ans"/> must be same.</para>
        /// <para>or</para>
        /// <para>The length of <paramref name="y"/> and <paramref name="ans"/> must be same.</para>
        /// </exception>
        /// <exception cref="NotSupportedException" />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add<T>(ReadOnlySpan<T> x, ReadOnlySpan<T> y, Span<T> ans, IIterationStrategy? iterationStrategy = null)
            where T : unmanaged
        {
            AssertSizeMatch(x, ans, nameof(x), nameof(ans));
            AssertSizeMatch(y, ans, nameof(y), nameof(ans));
            
            var len = ans.Length;
            var i = 0;
            if(typeof(T) == typeof(byte)
               || typeof(T) == typeof(ushort)
               || typeof(T) == typeof(uint)
               || typeof(T) == typeof(ulong)
               || typeof(T) == typeof(sbyte)
               || typeof(T) == typeof(short)
               || typeof(T) == typeof(int)
               || typeof(T) == typeof(long)
               || typeof(T) == typeof(float)
               || typeof(T) == typeof(double))
            {
                var vlen = GetVectorizableLength(ans);
                var vx = Cast(x, vlen);
                var vy = Cast(y, vlen);
                var vans = Cast(ans, vlen);
                if(iterationStrategy.IsDefault())
                {
                    for(var j = 0; j < vans.Length; ++j)
                    {
                        vans[j] = vx[j] + vy[j];
                    }
                }
                else
                {
                    fixed(Vector<T>* ptr_vx = vx)
                    fixed(Vector<T>* ptr_vy = vy)
                    fixed(Vector<T>* ptr_vans = vans)
                    {
                        var _ptr_vx = ptr_vx;
                        var _ptr_vy = ptr_vy;
                        var _ptr_vans = ptr_vans;
                        iterationStrategy!.For(0, vans.Length, j =>
                        {
                            _ptr_vans[j] = _ptr_vx[j] + _ptr_vy[j];
                        });
                    }
                }
                i = vlen;
            }
            for(; i < ans.Length; ++i)
            {
                ans[i] = ValueOperation.Add(x[i], y[i]);
            }
        }


        /// <summary> Operates <c>AddChecked</c> unaly operation. </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="ans"></param>
        /// <param name="iterationStrategy">
        /// <para>The iteration strategy provider.</para>
        /// <para>If <c>null</c> or <see cref="IterationStrategy.Default"/>, the iteration logic will be optimized with standard for-loop.</para>
        /// </param>
        /// <exception cref="ArgumentException">
        /// <para>The length of <paramref name="x"/> and <paramref name="ans"/> must be same.</para>
        /// <para>or</para>
        /// <para>The length of <paramref name="y"/> and <paramref name="ans"/> must be same.</para>
        /// </exception>
        /// <exception cref="NotSupportedException" />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddChecked<T>(ReadOnlySpan<T> x, ReadOnlySpan<T> y, Span<T> ans, IIterationStrategy? iterationStrategy = null)
            where T : unmanaged
        {
            AssertSizeMatch(x, ans, nameof(x), nameof(ans));
            AssertSizeMatch(y, ans, nameof(y), nameof(ans));
            
            var len = ans.Length;
            var i = 0;
            if(typeof(T) == typeof(byte)
               || typeof(T) == typeof(ushort)
               || typeof(T) == typeof(uint)
               || typeof(T) == typeof(ulong)
               || typeof(T) == typeof(sbyte)
               || typeof(T) == typeof(short)
               || typeof(T) == typeof(int)
               || typeof(T) == typeof(long)
               || typeof(T) == typeof(float)
               || typeof(T) == typeof(double))
            {
                var vlen = GetVectorizableLength(ans);
                var vx = Cast(x, vlen);
                var vy = Cast(y, vlen);
                var vans = Cast(ans, vlen);
                if(iterationStrategy.IsDefault())
                {
                    for(var j = 0; j < vans.Length; ++j)
                    {
                        vans[j] = vx[j] + vy[j];
                    }
                }
                else
                {
                    fixed(Vector<T>* ptr_vx = vx)
                    fixed(Vector<T>* ptr_vy = vy)
                    fixed(Vector<T>* ptr_vans = vans)
                    {
                        var _ptr_vx = ptr_vx;
                        var _ptr_vy = ptr_vy;
                        var _ptr_vans = ptr_vans;
                        iterationStrategy!.For(0, vans.Length, j =>
                        {
                            _ptr_vans[j] = _ptr_vx[j] + _ptr_vy[j];
                        });
                    }
                }
                i = vlen;
            }
            for(; i < ans.Length; ++i)
            {
                ans[i] = ValueOperation.AddChecked(x[i], y[i]);
            }
        }


        /// <summary> Operates <c>Subtract</c> unaly operation. </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="ans"></param>
        /// <param name="iterationStrategy">
        /// <para>The iteration strategy provider.</para>
        /// <para>If <c>null</c> or <see cref="IterationStrategy.Default"/>, the iteration logic will be optimized with standard for-loop.</para>
        /// </param>
        /// <exception cref="ArgumentException">
        /// <para>The length of <paramref name="x"/> and <paramref name="ans"/> must be same.</para>
        /// <para>or</para>
        /// <para>The length of <paramref name="y"/> and <paramref name="ans"/> must be same.</para>
        /// </exception>
        /// <exception cref="NotSupportedException" />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Subtract<T>(ReadOnlySpan<T> x, ReadOnlySpan<T> y, Span<T> ans, IIterationStrategy? iterationStrategy = null)
            where T : unmanaged
        {
            AssertSizeMatch(x, ans, nameof(x), nameof(ans));
            AssertSizeMatch(y, ans, nameof(y), nameof(ans));
            
            var len = ans.Length;
            var i = 0;
            if(typeof(T) == typeof(byte)
               || typeof(T) == typeof(ushort)
               || typeof(T) == typeof(uint)
               || typeof(T) == typeof(ulong)
               || typeof(T) == typeof(sbyte)
               || typeof(T) == typeof(short)
               || typeof(T) == typeof(int)
               || typeof(T) == typeof(long)
               || typeof(T) == typeof(float)
               || typeof(T) == typeof(double))
            {
                var vlen = GetVectorizableLength(ans);
                var vx = Cast(x, vlen);
                var vy = Cast(y, vlen);
                var vans = Cast(ans, vlen);
                if(iterationStrategy.IsDefault())
                {
                    for(var j = 0; j < vans.Length; ++j)
                    {
                        vans[j] = vx[j] - vy[j];
                    }
                }
                else
                {
                    fixed(Vector<T>* ptr_vx = vx)
                    fixed(Vector<T>* ptr_vy = vy)
                    fixed(Vector<T>* ptr_vans = vans)
                    {
                        var _ptr_vx = ptr_vx;
                        var _ptr_vy = ptr_vy;
                        var _ptr_vans = ptr_vans;
                        iterationStrategy!.For(0, vans.Length, j =>
                        {
                            _ptr_vans[j] = _ptr_vx[j] - _ptr_vy[j];
                        });
                    }
                }
                i = vlen;
            }
            for(; i < ans.Length; ++i)
            {
                ans[i] = ValueOperation.Subtract(x[i], y[i]);
            }
        }


        /// <summary> Operates <c>SubtractChecked</c> unaly operation. </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="ans"></param>
        /// <param name="iterationStrategy">
        /// <para>The iteration strategy provider.</para>
        /// <para>If <c>null</c> or <see cref="IterationStrategy.Default"/>, the iteration logic will be optimized with standard for-loop.</para>
        /// </param>
        /// <exception cref="ArgumentException">
        /// <para>The length of <paramref name="x"/> and <paramref name="ans"/> must be same.</para>
        /// <para>or</para>
        /// <para>The length of <paramref name="y"/> and <paramref name="ans"/> must be same.</para>
        /// </exception>
        /// <exception cref="NotSupportedException" />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubtractChecked<T>(ReadOnlySpan<T> x, ReadOnlySpan<T> y, Span<T> ans, IIterationStrategy? iterationStrategy = null)
            where T : unmanaged
        {
            AssertSizeMatch(x, ans, nameof(x), nameof(ans));
            AssertSizeMatch(y, ans, nameof(y), nameof(ans));
            
            var len = ans.Length;
            var i = 0;
            if(typeof(T) == typeof(byte)
               || typeof(T) == typeof(ushort)
               || typeof(T) == typeof(uint)
               || typeof(T) == typeof(ulong)
               || typeof(T) == typeof(sbyte)
               || typeof(T) == typeof(short)
               || typeof(T) == typeof(int)
               || typeof(T) == typeof(long)
               || typeof(T) == typeof(float)
               || typeof(T) == typeof(double))
            {
                var vlen = GetVectorizableLength(ans);
                var vx = Cast(x, vlen);
                var vy = Cast(y, vlen);
                var vans = Cast(ans, vlen);
                if(iterationStrategy.IsDefault())
                {
                    for(var j = 0; j < vans.Length; ++j)
                    {
                        vans[j] = vx[j] - vy[j];
                    }
                }
                else
                {
                    fixed(Vector<T>* ptr_vx = vx)
                    fixed(Vector<T>* ptr_vy = vy)
                    fixed(Vector<T>* ptr_vans = vans)
                    {
                        var _ptr_vx = ptr_vx;
                        var _ptr_vy = ptr_vy;
                        var _ptr_vans = ptr_vans;
                        iterationStrategy!.For(0, vans.Length, j =>
                        {
                            _ptr_vans[j] = _ptr_vx[j] - _ptr_vy[j];
                        });
                    }
                }
                i = vlen;
            }
            for(; i < ans.Length; ++i)
            {
                ans[i] = ValueOperation.SubtractChecked(x[i], y[i]);
            }
        }


        /// <summary> Operates <c>Multiply</c> unaly operation. </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="ans"></param>
        /// <param name="iterationStrategy">
        /// <para>The iteration strategy provider.</para>
        /// <para>If <c>null</c> or <see cref="IterationStrategy.Default"/>, the iteration logic will be optimized with standard for-loop.</para>
        /// </param>
        /// <exception cref="ArgumentException">
        /// <para>The length of <paramref name="x"/> and <paramref name="ans"/> must be same.</para>
        /// <para>or</para>
        /// <para>The length of <paramref name="y"/> and <paramref name="ans"/> must be same.</para>
        /// </exception>
        /// <exception cref="NotSupportedException" />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Multiply<T>(ReadOnlySpan<T> x, ReadOnlySpan<T> y, Span<T> ans, IIterationStrategy? iterationStrategy = null)
            where T : unmanaged
        {
            AssertSizeMatch(x, ans, nameof(x), nameof(ans));
            AssertSizeMatch(y, ans, nameof(y), nameof(ans));
            
            var len = ans.Length;
            var i = 0;
            if(typeof(T) == typeof(byte)
               || typeof(T) == typeof(ushort)
               || typeof(T) == typeof(uint)
               || typeof(T) == typeof(ulong)
               || typeof(T) == typeof(sbyte)
               || typeof(T) == typeof(short)
               || typeof(T) == typeof(int)
               || typeof(T) == typeof(long)
               || typeof(T) == typeof(float)
               || typeof(T) == typeof(double))
            {
                var vlen = GetVectorizableLength(ans);
                var vx = Cast(x, vlen);
                var vy = Cast(y, vlen);
                var vans = Cast(ans, vlen);
                if(iterationStrategy.IsDefault())
                {
                    for(var j = 0; j < vans.Length; ++j)
                    {
                        vans[j] = vx[j] * vy[j];
                    }
                }
                else
                {
                    fixed(Vector<T>* ptr_vx = vx)
                    fixed(Vector<T>* ptr_vy = vy)
                    fixed(Vector<T>* ptr_vans = vans)
                    {
                        var _ptr_vx = ptr_vx;
                        var _ptr_vy = ptr_vy;
                        var _ptr_vans = ptr_vans;
                        iterationStrategy!.For(0, vans.Length, j =>
                        {
                            _ptr_vans[j] = _ptr_vx[j] * _ptr_vy[j];
                        });
                    }
                }
                i = vlen;
            }
            for(; i < ans.Length; ++i)
            {
                ans[i] = ValueOperation.Multiply(x[i], y[i]);
            }
        }


        /// <summary> Operates <c>MultiplyChecked</c> unaly operation. </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="ans"></param>
        /// <param name="iterationStrategy">
        /// <para>The iteration strategy provider.</para>
        /// <para>If <c>null</c> or <see cref="IterationStrategy.Default"/>, the iteration logic will be optimized with standard for-loop.</para>
        /// </param>
        /// <exception cref="ArgumentException">
        /// <para>The length of <paramref name="x"/> and <paramref name="ans"/> must be same.</para>
        /// <para>or</para>
        /// <para>The length of <paramref name="y"/> and <paramref name="ans"/> must be same.</para>
        /// </exception>
        /// <exception cref="NotSupportedException" />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MultiplyChecked<T>(ReadOnlySpan<T> x, ReadOnlySpan<T> y, Span<T> ans, IIterationStrategy? iterationStrategy = null)
            where T : unmanaged
        {
            AssertSizeMatch(x, ans, nameof(x), nameof(ans));
            AssertSizeMatch(y, ans, nameof(y), nameof(ans));
            
            var len = ans.Length;
            var i = 0;
            if(typeof(T) == typeof(byte)
               || typeof(T) == typeof(ushort)
               || typeof(T) == typeof(uint)
               || typeof(T) == typeof(ulong)
               || typeof(T) == typeof(sbyte)
               || typeof(T) == typeof(short)
               || typeof(T) == typeof(int)
               || typeof(T) == typeof(long)
               || typeof(T) == typeof(float)
               || typeof(T) == typeof(double))
            {
                var vlen = GetVectorizableLength(ans);
                var vx = Cast(x, vlen);
                var vy = Cast(y, vlen);
                var vans = Cast(ans, vlen);
                if(iterationStrategy.IsDefault())
                {
                    for(var j = 0; j < vans.Length; ++j)
                    {
                        vans[j] = vx[j] * vy[j];
                    }
                }
                else
                {
                    fixed(Vector<T>* ptr_vx = vx)
                    fixed(Vector<T>* ptr_vy = vy)
                    fixed(Vector<T>* ptr_vans = vans)
                    {
                        var _ptr_vx = ptr_vx;
                        var _ptr_vy = ptr_vy;
                        var _ptr_vans = ptr_vans;
                        iterationStrategy!.For(0, vans.Length, j =>
                        {
                            _ptr_vans[j] = _ptr_vx[j] * _ptr_vy[j];
                        });
                    }
                }
                i = vlen;
            }
            for(; i < ans.Length; ++i)
            {
                ans[i] = ValueOperation.MultiplyChecked(x[i], y[i]);
            }
        }


        /// <summary> Operates <c>Divide</c> unaly operation. </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="ans"></param>
        /// <param name="iterationStrategy">
        /// <para>The iteration strategy provider.</para>
        /// <para>If <c>null</c> or <see cref="IterationStrategy.Default"/>, the iteration logic will be optimized with standard for-loop.</para>
        /// </param>
        /// <exception cref="ArgumentException">
        /// <para>The length of <paramref name="x"/> and <paramref name="ans"/> must be same.</para>
        /// <para>or</para>
        /// <para>The length of <paramref name="y"/> and <paramref name="ans"/> must be same.</para>
        /// </exception>
        /// <exception cref="NotSupportedException" />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Divide<T>(ReadOnlySpan<T> x, ReadOnlySpan<T> y, Span<T> ans, IIterationStrategy? iterationStrategy = null)
            where T : unmanaged
        {
            AssertSizeMatch(x, ans, nameof(x), nameof(ans));
            AssertSizeMatch(y, ans, nameof(y), nameof(ans));
            
            var len = ans.Length;
            var i = 0;
            if(typeof(T) == typeof(byte)
               || typeof(T) == typeof(ushort)
               || typeof(T) == typeof(uint)
               || typeof(T) == typeof(ulong)
               || typeof(T) == typeof(sbyte)
               || typeof(T) == typeof(short)
               || typeof(T) == typeof(int)
               || typeof(T) == typeof(long)
               || typeof(T) == typeof(float)
               || typeof(T) == typeof(double))
            {
                var vlen = GetVectorizableLength(ans);
                var vx = Cast(x, vlen);
                var vy = Cast(y, vlen);
                var vans = Cast(ans, vlen);
                if(iterationStrategy.IsDefault())
                {
                    for(var j = 0; j < vans.Length; ++j)
                    {
                        vans[j] = vx[j] / vy[j];
                    }
                }
                else
                {
                    fixed(Vector<T>* ptr_vx = vx)
                    fixed(Vector<T>* ptr_vy = vy)
                    fixed(Vector<T>* ptr_vans = vans)
                    {
                        var _ptr_vx = ptr_vx;
                        var _ptr_vy = ptr_vy;
                        var _ptr_vans = ptr_vans;
                        iterationStrategy!.For(0, vans.Length, j =>
                        {
                            _ptr_vans[j] = _ptr_vx[j] / _ptr_vy[j];
                        });
                    }
                }
                i = vlen;
            }
            for(; i < ans.Length; ++i)
            {
                ans[i] = ValueOperation.Divide(x[i], y[i]);
            }
        }


        /// <summary> Operates <c>Modulo</c> unaly operation. </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="ans"></param>
        /// <param name="iterationStrategy">
        /// <para>The iteration strategy provider.</para>
        /// <para>If <c>null</c> or <see cref="IterationStrategy.Default"/>, the iteration logic will be optimized with standard for-loop.</para>
        /// </param>
        /// <exception cref="ArgumentException">
        /// <para>The length of <paramref name="x"/> and <paramref name="ans"/> must be same.</para>
        /// <para>or</para>
        /// <para>The length of <paramref name="y"/> and <paramref name="ans"/> must be same.</para>
        /// </exception>
        /// <exception cref="NotSupportedException" />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Modulo<T>(ReadOnlySpan<T> x, ReadOnlySpan<T> y, Span<T> ans, IIterationStrategy? iterationStrategy = null)
            where T : unmanaged
        {
            AssertSizeMatch(x, ans, nameof(x), nameof(ans));
            AssertSizeMatch(y, ans, nameof(y), nameof(ans));
            
            var len = ans.Length;
            var i = 0;
            if(typeof(T) == typeof(byte)
               || typeof(T) == typeof(ushort)
               || typeof(T) == typeof(uint)
               || typeof(T) == typeof(ulong)
               || typeof(T) == typeof(sbyte)
               || typeof(T) == typeof(short)
               || typeof(T) == typeof(int)
               || typeof(T) == typeof(long)
               || typeof(T) == typeof(float)
               || typeof(T) == typeof(double))
            {
                var vlen = GetVectorizableLength(ans);
                var vx = Cast(x, vlen);
                var vy = Cast(y, vlen);
                var vans = Cast(ans, vlen);
                if(iterationStrategy.IsDefault())
                {
                    for(var j = 0; j < vans.Length; ++j)
                    {
                        vans[j] = vx[j] - vy[j] * (vx[j] / vy[j]);
                    }
                }
                else
                {
                    fixed(Vector<T>* ptr_vx = vx)
                    fixed(Vector<T>* ptr_vy = vy)
                    fixed(Vector<T>* ptr_vans = vans)
                    {
                        var _ptr_vx = ptr_vx;
                        var _ptr_vy = ptr_vy;
                        var _ptr_vans = ptr_vans;
                        iterationStrategy!.For(0, vans.Length, j =>
                        {
                            _ptr_vans[j] = _ptr_vx[j] - _ptr_vy[j] * (_ptr_vx[j] / _ptr_vy[j]);
                        });
                    }
                }
                i = vlen;
            }
            for(; i < ans.Length; ++i)
            {
                ans[i] = ValueOperation.Modulo(x[i], y[i]);
            }
        }


        /// <summary> Operates <c>BitwiseOr</c> unaly operation. </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="ans"></param>
        /// <param name="iterationStrategy">
        /// <para>The iteration strategy provider.</para>
        /// <para>If <c>null</c> or <see cref="IterationStrategy.Default"/>, the iteration logic will be optimized with standard for-loop.</para>
        /// </param>
        /// <exception cref="ArgumentException">
        /// <para>The length of <paramref name="x"/> and <paramref name="ans"/> must be same.</para>
        /// <para>or</para>
        /// <para>The length of <paramref name="y"/> and <paramref name="ans"/> must be same.</para>
        /// </exception>
        /// <exception cref="NotSupportedException" />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void BitwiseOr<T>(ReadOnlySpan<T> x, ReadOnlySpan<T> y, Span<T> ans, IIterationStrategy? iterationStrategy = null)
            where T : unmanaged
        {
            AssertSizeMatch(x, ans, nameof(x), nameof(ans));
            AssertSizeMatch(y, ans, nameof(y), nameof(ans));
            
            var len = ans.Length;
            var i = 0;
            if(typeof(T) == typeof(byte)
               || typeof(T) == typeof(ushort)
               || typeof(T) == typeof(uint)
               || typeof(T) == typeof(ulong)
               || typeof(T) == typeof(sbyte)
               || typeof(T) == typeof(short)
               || typeof(T) == typeof(int)
               || typeof(T) == typeof(long)
               || typeof(T) == typeof(float)
               || typeof(T) == typeof(double))
            {
                var vlen = GetVectorizableLength(ans);
                var vx = Cast(x, vlen);
                var vy = Cast(y, vlen);
                var vans = Cast(ans, vlen);
                if(iterationStrategy.IsDefault())
                {
                    for(var j = 0; j < vans.Length; ++j)
                    {
                        vans[j] = vx[j] | vy[j];
                    }
                }
                else
                {
                    fixed(Vector<T>* ptr_vx = vx)
                    fixed(Vector<T>* ptr_vy = vy)
                    fixed(Vector<T>* ptr_vans = vans)
                    {
                        var _ptr_vx = ptr_vx;
                        var _ptr_vy = ptr_vy;
                        var _ptr_vans = ptr_vans;
                        iterationStrategy!.For(0, vans.Length, j =>
                        {
                            _ptr_vans[j] = _ptr_vx[j] | _ptr_vy[j];
                        });
                    }
                }
                i = vlen;
            }
            for(; i < ans.Length; ++i)
            {
                ans[i] = ValueOperation.BitwiseOr(x[i], y[i]);
            }
        }


        /// <summary> Operates <c>BitwiseAnd</c> unaly operation. </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="ans"></param>
        /// <param name="iterationStrategy">
        /// <para>The iteration strategy provider.</para>
        /// <para>If <c>null</c> or <see cref="IterationStrategy.Default"/>, the iteration logic will be optimized with standard for-loop.</para>
        /// </param>
        /// <exception cref="ArgumentException">
        /// <para>The length of <paramref name="x"/> and <paramref name="ans"/> must be same.</para>
        /// <para>or</para>
        /// <para>The length of <paramref name="y"/> and <paramref name="ans"/> must be same.</para>
        /// </exception>
        /// <exception cref="NotSupportedException" />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void BitwiseAnd<T>(ReadOnlySpan<T> x, ReadOnlySpan<T> y, Span<T> ans, IIterationStrategy? iterationStrategy = null)
            where T : unmanaged
        {
            AssertSizeMatch(x, ans, nameof(x), nameof(ans));
            AssertSizeMatch(y, ans, nameof(y), nameof(ans));
            
            var len = ans.Length;
            var i = 0;
            if(typeof(T) == typeof(byte)
               || typeof(T) == typeof(ushort)
               || typeof(T) == typeof(uint)
               || typeof(T) == typeof(ulong)
               || typeof(T) == typeof(sbyte)
               || typeof(T) == typeof(short)
               || typeof(T) == typeof(int)
               || typeof(T) == typeof(long)
               || typeof(T) == typeof(float)
               || typeof(T) == typeof(double))
            {
                var vlen = GetVectorizableLength(ans);
                var vx = Cast(x, vlen);
                var vy = Cast(y, vlen);
                var vans = Cast(ans, vlen);
                if(iterationStrategy.IsDefault())
                {
                    for(var j = 0; j < vans.Length; ++j)
                    {
                        vans[j] = vx[j] & vy[j];
                    }
                }
                else
                {
                    fixed(Vector<T>* ptr_vx = vx)
                    fixed(Vector<T>* ptr_vy = vy)
                    fixed(Vector<T>* ptr_vans = vans)
                    {
                        var _ptr_vx = ptr_vx;
                        var _ptr_vy = ptr_vy;
                        var _ptr_vans = ptr_vans;
                        iterationStrategy!.For(0, vans.Length, j =>
                        {
                            _ptr_vans[j] = _ptr_vx[j] & _ptr_vy[j];
                        });
                    }
                }
                i = vlen;
            }
            for(; i < ans.Length; ++i)
            {
                ans[i] = ValueOperation.BitwiseAnd(x[i], y[i]);
            }
        }


        /// <summary> Operates <c>BitwiseXor</c> unaly operation. </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="ans"></param>
        /// <param name="iterationStrategy">
        /// <para>The iteration strategy provider.</para>
        /// <para>If <c>null</c> or <see cref="IterationStrategy.Default"/>, the iteration logic will be optimized with standard for-loop.</para>
        /// </param>
        /// <exception cref="ArgumentException">
        /// <para>The length of <paramref name="x"/> and <paramref name="ans"/> must be same.</para>
        /// <para>or</para>
        /// <para>The length of <paramref name="y"/> and <paramref name="ans"/> must be same.</para>
        /// </exception>
        /// <exception cref="NotSupportedException" />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void BitwiseXor<T>(ReadOnlySpan<T> x, ReadOnlySpan<T> y, Span<T> ans, IIterationStrategy? iterationStrategy = null)
            where T : unmanaged
        {
            AssertSizeMatch(x, ans, nameof(x), nameof(ans));
            AssertSizeMatch(y, ans, nameof(y), nameof(ans));
            
            var len = ans.Length;
            var i = 0;
            if(typeof(T) == typeof(byte)
               || typeof(T) == typeof(ushort)
               || typeof(T) == typeof(uint)
               || typeof(T) == typeof(ulong)
               || typeof(T) == typeof(sbyte)
               || typeof(T) == typeof(short)
               || typeof(T) == typeof(int)
               || typeof(T) == typeof(long)
               || typeof(T) == typeof(float)
               || typeof(T) == typeof(double))
            {
                var vlen = GetVectorizableLength(ans);
                var vx = Cast(x, vlen);
                var vy = Cast(y, vlen);
                var vans = Cast(ans, vlen);
                if(iterationStrategy.IsDefault())
                {
                    for(var j = 0; j < vans.Length; ++j)
                    {
                        vans[j] = vx[j] ^ vy[j];
                    }
                }
                else
                {
                    fixed(Vector<T>* ptr_vx = vx)
                    fixed(Vector<T>* ptr_vy = vy)
                    fixed(Vector<T>* ptr_vans = vans)
                    {
                        var _ptr_vx = ptr_vx;
                        var _ptr_vy = ptr_vy;
                        var _ptr_vans = ptr_vans;
                        iterationStrategy!.For(0, vans.Length, j =>
                        {
                            _ptr_vans[j] = _ptr_vx[j] ^ _ptr_vy[j];
                        });
                    }
                }
                i = vlen;
            }
            for(; i < ans.Length; ++i)
            {
                ans[i] = ValueOperation.BitwiseXor(x[i], y[i]);
            }
        }

    }
}